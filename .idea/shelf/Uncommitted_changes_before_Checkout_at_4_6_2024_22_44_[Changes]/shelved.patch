Index: app/src/main/java/com/pdm115/proyectopdm2024_gt1_grupo1_tema1/RegistroParteDos.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pdm115.proyectopdm2024_gt1_grupo1_tema1\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.Toast\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.ViewCompat\r\nimport androidx.core.view.WindowInsetsCompat\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.pdm115.proyectopdm2024_gt1_grupo1_tema1.Data.FirebaseClient\r\nimport com.pdm115.proyectopdm2024_gt1_grupo1_tema1.Data.Services.AuthService\r\nimport com.pdm115.proyectopdm2024_gt1_grupo1_tema1.Data.Services.RolService\r\nimport com.pdm115.proyectopdm2024_gt1_grupo1_tema1.Data.Services.UsuarioService\r\nimport com.pdm115.proyectopdm2024_gt1_grupo1_tema1.Models.Rol\r\nimport com.pdm115.proyectopdm2024_gt1_grupo1_tema1.Models.Usuario\r\nimport java.util.UUID\r\nimport javax.inject.Inject\r\n\r\nclass RegistroParteDos : AppCompatActivity() {\r\n\r\n    private lateinit var nombreUsuario: EditText\r\n    private lateinit var contrasena: EditText\r\n    private lateinit var confirmarContrasena: EditText\r\n\r\n    private lateinit var rolService: RolService\r\n    private lateinit var usuarioService: UsuarioService\r\n    private lateinit var authService: AuthService\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        enableEdgeToEdge()\r\n        setContentView(R.layout.activity_registro_parte_dos)\r\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\r\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\r\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\r\n            insets\r\n        }\r\n\r\n        // Inicializa los servicios\r\n        val firebaseClient = FirebaseClient()\r\n        rolService = RolService(firebaseClient.db)\r\n        usuarioService = UsuarioService(firebaseClient.db)\r\n        authService = AuthService(firebaseClient)\r\n\r\n        this.bindEditText()\r\n        val btnRegistrarse: Button = findViewById(R.id.btn_registrarme_registro_parte2)\r\n        val btnRegresar: Button = findViewById(R.id.btn_anterior_registro_parte2)\r\n        val intentA1 = intent\r\n\r\n        val nombreCompleto = intentA1.getStringExtra(\"nombreCompleto\")\r\n        val correoElectronico = intentA1.getStringExtra(\"correoElectronico\")\r\n        val fechaNacimiento = intentA1.getStringExtra(\"fechaNacimiento\")\r\n\r\n        btnRegistrarse.setOnClickListener {\r\n            if (!this.verificarCampos()) {\r\n                Toast.makeText(this, \"Por favor llene todos los campos\", Toast.LENGTH_SHORT).show()\r\n                return@setOnClickListener\r\n            }\r\n            if (contrasena.text.toString() != confirmarContrasena.text.toString()) {\r\n                Toast.makeText(this, \"Las contraseñas no coinciden\", Toast.LENGTH_SHORT).show()\r\n                return@setOnClickListener\r\n            }\r\n\r\n            rolService.getClientRol { result ->\r\n                result.onSuccess { rol ->\r\n                    if (rol != null) {\r\n                        Toast.makeText(this, \"Rol de cliente obtenido \" + rol.nombreRol, Toast.LENGTH_SHORT).show()\r\n                        if (rol.nombreRol != \"\") {\r\n                            val nuevoUsuario = Usuario(\r\n                                idUsuario = UUID.randomUUID().toString(),\r\n                                nombreUsuario = nombreUsuario.text.toString(),\r\n                                nombreCompleto = nombreCompleto!!,\r\n                                correoUsuario = correoElectronico!!,\r\n                                clave = contrasena.text.toString(),\r\n                                fechaNacimiento = fechaNacimiento!!,\r\n                                rol = rol,\r\n                                dui = \"\",\r\n                                avatarPath = \"\"\r\n                            )\r\n                            crearUsuarioFirebase(nuevoUsuario)\r\n                        }\r\n                    } else {\r\n                        Toast.makeText(this, \"Rol no encontrado\", Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }.onFailure { exception ->\r\n                    Toast.makeText(this, \"Error al obtener el rol: ${exception.message}\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n\r\n            rolService.getClientRol { clienteRol ->\r\n                if (clienteRol != null) {\r\n\r\n                } else {\r\n                    Toast.makeText(this, \"Error al obtener el rol de cliente\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n\r\n        btnRegresar.setOnClickListener {\r\n            finish()\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Verifica que los campos no estén vacíos\r\n     */\r\n    private fun verificarCampos(): Boolean {\r\n        return nombreUsuario.text.isNotEmpty() && contrasena.text.isNotEmpty() && confirmarContrasena.text.isNotEmpty()\r\n    }\r\n\r\n    /**\r\n    * Asocia los EditText con las variables\r\n    */\r\n    private fun bindEditText() {\r\n        nombreUsuario = findViewById(R.id.edtxt_nombre_usuario_parte2)\r\n        contrasena = findViewById(R.id.edtxt_contrasenia_parte2)\r\n        confirmarContrasena = findViewById(R.id.edtxt_repetir_contrasenia)\r\n    }\r\n\r\n    @SuppressLint(\"ShowToast\")\r\n    private fun crearUsuarioFirebase(nuevoUsuario: Usuario)\r\n    {\r\n\r\n        usuarioService.existUsuario(nuevoUsuario.correoUsuario) { exists ->\r\n            if (exists) {\r\n                // user already exists\r\n                Toast.makeText(this, \"El usuario ya existe\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                Toast.makeText(this, \"Registrando usuario\", Toast.LENGTH_SHORT).show()\r\n                usuarioService.existCollection { existCol ->\r\n                    if (existCol) {\r\n                        usuarioService.createUsuario(nuevoUsuario) { it ->\r\n                            if (it) {\r\n                                authService.createAccount(nuevoUsuario.correoUsuario,nuevoUsuario.clave) { lr ->\r\n                                    if (lr) {\r\n                                        Toast.makeText(this, \"Usuario registrado\", Toast.LENGTH_SHORT).show()\r\n                                        goRegistroCompletadoIntent()\r\n                                    } else {\r\n                                        Toast.makeText(this, \"Error al registrar usuario\", Toast.LENGTH_SHORT).show()\r\n                                        //- delete usuario\r\n                                        usuarioService.deleteUsuario(nuevoUsuario.idUsuario) { _ -> }\r\n                                        return@createAccount\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                Toast.makeText(this, \"Error al registrar usuario\", Toast.LENGTH_SHORT).show()\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private fun goRegistroCompletadoIntent()\r\n    {\r\n        val intent = Intent(this, RegistroCompletado::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun goLoginIntent()\r\n    {\r\n        val intent: Intent = Intent(this, IniciarSesion::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun generateRoles(callback: (Rol) -> Unit)\r\n    {\r\n        val roles = listOf(\r\n            Rol(UUID.randomUUID().toString(), \"Cliente\", \"Cliente de la aplicación\"),\r\n            Rol(UUID.randomUUID().toString(), \"Administrador\", \"Administrador de la aplicación\")\r\n        )\r\n        roles.forEach {\r\n            FirebaseDatabase.getInstance().getReference(\"Roles\").child(it.idRol).setValue(it)\r\n        }\r\n\r\n        callback(roles.first { it.nombreRol == \"Administrador\" })\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pdm115/proyectopdm2024_gt1_grupo1_tema1/RegistroParteDos.kt b/app/src/main/java/com/pdm115/proyectopdm2024_gt1_grupo1_tema1/RegistroParteDos.kt
--- a/app/src/main/java/com/pdm115/proyectopdm2024_gt1_grupo1_tema1/RegistroParteDos.kt	
+++ b/app/src/main/java/com/pdm115/proyectopdm2024_gt1_grupo1_tema1/RegistroParteDos.kt	
@@ -5,6 +5,7 @@
 import android.os.Bundle
 import android.widget.Button
 import android.widget.EditText
+import android.widget.TextView
 import android.widget.Toast
 import androidx.activity.enableEdgeToEdge
 import androidx.appcompat.app.AppCompatActivity
